/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CourseMarket {
  export type CourseViewStruct = {
    web2CourseId: string;
    name: string;
    price: BigNumberish;
    isActive: boolean;
    creator: AddressLike;
    purchased: boolean;
    metadataURI: string;
  };

  export type CourseViewStructOutput = [
    web2CourseId: string,
    name: string,
    price: bigint,
    isActive: boolean,
    creator: string,
    purchased: boolean,
    metadataURI: string
  ] & {
    web2CourseId: string;
    name: string;
    price: bigint;
    isActive: boolean;
    creator: string;
    purchased: boolean;
    metadataURI: string;
  };

  export type CourseStruct = {
    web2CourseId: string;
    name: string;
    price: BigNumberish;
    isActive: boolean;
    creator: AddressLike;
    metadataURI: string;
  };

  export type CourseStructOutput = [
    web2CourseId: string,
    name: string,
    price: bigint,
    isActive: boolean,
    creator: string,
    metadataURI: string
  ] & {
    web2CourseId: string;
    name: string;
    price: bigint;
    isActive: boolean;
    creator: string;
    metadataURI: string;
  };
}

export interface CourseMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCourse"
      | "completeCourse"
      | "courseCount"
      | "courses"
      | "getCoursesByPage"
      | "getUserPurchasedCourses"
      | "hasCourse"
      | "mmcNFT"
      | "mmcToken"
      | "oracle"
      | "owner"
      | "purchaseCourse"
      | "renounceOwnership"
      | "setOracle"
      | "transferOwnership"
      | "updateCoursePrice"
      | "updateCourseStatus"
      | "userCourses"
      | "web2ToCourseId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCompleted"
      | "CoursePurchased"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCourse",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "courseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoursesByPage",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPurchasedCourses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCourse",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "mmcNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "mmcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoursePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCourseStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userCourses",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "web2ToCourseId",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "courseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoursesByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPurchasedCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mmcNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mmcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoursePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCourseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "web2ToCourseId",
    data: BytesLike
  ): Result;
}

export namespace CourseCompletedEvent {
  export type InputTuple = [
    student: AddressLike,
    courseId: BigNumberish,
    web2CourseId: string,
    nftTokenId: BigNumberish
  ];
  export type OutputTuple = [
    student: string,
    courseId: bigint,
    web2CourseId: string,
    nftTokenId: bigint
  ];
  export interface OutputObject {
    student: string;
    courseId: bigint;
    web2CourseId: string;
    nftTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    courseId: BigNumberish,
    web2CourseId: string
  ];
  export type OutputTuple = [
    buyer: string,
    courseId: bigint,
    web2CourseId: string
  ];
  export interface OutputObject {
    buyer: string;
    courseId: bigint;
    web2CourseId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CourseMarket extends BaseContract {
  connect(runner?: ContractRunner | null): CourseMarket;
  waitForDeployment(): Promise<this>;

  interface: CourseMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCourse: TypedContractMethod<
    [
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      metadataURI: string
    ],
    [void],
    "nonpayable"
  >;

  completeCourse: TypedContractMethod<
    [student: AddressLike, web2CourseId: string],
    [void],
    "nonpayable"
  >;

  courseCount: TypedContractMethod<[], [bigint], "view">;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, string, string] & {
        web2CourseId: string;
        name: string;
        price: bigint;
        isActive: boolean;
        creator: string;
        metadataURI: string;
      }
    ],
    "view"
  >;

  getCoursesByPage: TypedContractMethod<
    [user: AddressLike, page: BigNumberish, pageSize: BigNumberish],
    [[CourseMarket.CourseViewStructOutput[], bigint]],
    "view"
  >;

  getUserPurchasedCourses: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], CourseMarket.CourseStructOutput[]] & {
        courseIds: bigint[];
        courseDetails: CourseMarket.CourseStructOutput[];
      }
    ],
    "view"
  >;

  hasCourse: TypedContractMethod<
    [user: AddressLike, web2CourseId: string],
    [boolean],
    "view"
  >;

  mmcNFT: TypedContractMethod<[], [string], "view">;

  mmcToken: TypedContractMethod<[], [string], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseCourse: TypedContractMethod<
    [web2CourseId: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCoursePrice: TypedContractMethod<
    [courseId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCourseStatus: TypedContractMethod<
    [courseId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  userCourses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  web2ToCourseId: TypedContractMethod<[arg0: string], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCourse"
  ): TypedContractMethod<
    [
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      metadataURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeCourse"
  ): TypedContractMethod<
    [student: AddressLike, web2CourseId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "courseCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, string, string] & {
        web2CourseId: string;
        name: string;
        price: bigint;
        isActive: boolean;
        creator: string;
        metadataURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoursesByPage"
  ): TypedContractMethod<
    [user: AddressLike, page: BigNumberish, pageSize: BigNumberish],
    [[CourseMarket.CourseViewStructOutput[], bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPurchasedCourses"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], CourseMarket.CourseStructOutput[]] & {
        courseIds: bigint[];
        courseDetails: CourseMarket.CourseStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasCourse"
  ): TypedContractMethod<
    [user: AddressLike, web2CourseId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mmcNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mmcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseCourse"
  ): TypedContractMethod<[web2CourseId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCoursePrice"
  ): TypedContractMethod<
    [courseId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCourseStatus"
  ): TypedContractMethod<
    [courseId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCourses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "web2ToCourseId"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;

  getEvent(
    key: "CourseCompleted"
  ): TypedContractEvent<
    CourseCompletedEvent.InputTuple,
    CourseCompletedEvent.OutputTuple,
    CourseCompletedEvent.OutputObject
  >;
  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CourseCompleted(address,uint256,string,uint256)": TypedContractEvent<
      CourseCompletedEvent.InputTuple,
      CourseCompletedEvent.OutputTuple,
      CourseCompletedEvent.OutputObject
    >;
    CourseCompleted: TypedContractEvent<
      CourseCompletedEvent.InputTuple,
      CourseCompletedEvent.OutputTuple,
      CourseCompletedEvent.OutputObject
    >;

    "CoursePurchased(address,uint256,string)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
